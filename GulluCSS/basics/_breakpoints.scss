@use 'sass:map' as map;
/*
map-get(map, key)	Returns the value for the specified key in the map.
map-has-key(map, key)	Checks whether map has the specified key. Returns true or false.
map-keys(map)	Returns a list of all keys in map.
map-merge(map1, map2)	Appends map2 to the end of map1.
map.deep-merge($map1, $map2) Nested map values are also recursively merged.
map-remove(map, keys...)	Removes the specified keys from map.
map-values(map)	Returns a list of all values in map.
map.deep-remove($map, $key, $keys...) If $keys is empty, returns a copy of $map without a value associated with $key.
map.set($map, $key, $value)
map.set($map, $keys..., $key, $value) : If $keys are not passed, returns a copy of $map with the value at $key set to $value.
*/
$breakpoints: (
  'mobile_s': 320px,
  'mobile_m':375px,
  'mobile_l':425px,
  'tablet':768px,
  'laptop':1024px,
  'laptop_l':1440px
  '4K' : 2560px
);


@mixin mobile_s
{
  @media (min-width:map-get($breakpoints,'mobile_s')){
    @content;
  }
}

@mixin mobile_m
{
  @media (min-width:map-get($breakpoints,'mobile_m')){
    @content;
  }
}

@mixin mobile_l
{
  @media (min-width:map-get($breakpoints,'mobile_l')){
    @content;
  }
}

@mixin tablet
{
  @media (min-width:map-get($breakpoints,'tablet')){
    @content;
  }
}

@mixin laptop
{
  @media (min-width:map-get($breakpoints,'laptop')){
    @content;
  }
}

@mixin laptop_l
{
  @media (min-width:map-get($breakpoints,'laptop_l')){
    @content;
  }
}

@mixin FHD
{
  @media (min-width:map-get($breakpoints,'4K')){
    @content;
  }
}